import React, { useState, useEffect, useRef } from 'react';
import { Link } from 'react-router-dom';

const AI_JOKES = [
  "We promise this course project is not generated by AI --- Wait, How can you tell?",
  // "Why did the neural network go to school? To improve its “grades”!",
  // "I asked my AI to tell me a joke—now it’s stuck in an infinite loop of puns.",
  // "What’s an AI’s favorite music? Neural Rap-ture.",
  // "Why don’t robots ever get lost? They always follow the right ‘path’!",
  // "I tried teaching my AI to say ‘hello’ in six languages—it’s now a polyglot processor."
];

export default function Search() {
  const [q, setQ] = useState('');
  const [results, setResults] = useState([]);
  const [wm, setWm] = useState('');
  const [showResults, setShowResults] = useState(false);
  const [loading, setLoading] = useState(false);
  const [joke, setJoke] = useState('');
  const jokeInterval = useRef(null);

  // cleanup interval on unmount
  useEffect(() => {
    return () => clearInterval(jokeInterval.current);
  }, []);

  const startJokes = () => {
    // show one immediately
    setJoke(AI_JOKES[Math.floor(Math.random() * AI_JOKES.length)]);
    // rotate every 4 seconds
    jokeInterval.current = setInterval(() => {
      setJoke(AI_JOKES[Math.floor(Math.random() * AI_JOKES.length)]);
    }, 4000);
  };

  const stopJokes = () => {
    clearInterval(jokeInterval.current);
    jokeInterval.current = null;
    setJoke('');
  };

  const doSearch = async () => {
    setLoading(true);
    startJokes();

    try {
      const res = await fetch(`/api/search?q=${encodeURIComponent(q)}`);
      const { results, watermark } = await res.json();
      setResults(results);
      setWm(watermark);
      setShowResults(true);
    } catch (err) {
      console.error(err);
      setResults([{ title: 'Error', snippet: 'Could not fetch results.', url: '#' }]);
      setShowResults(true);
    } finally {
      stopJokes();
      setLoading(false);
    }
  };

  return (
    <div className="container">
      {loading ? (
        <div className="loading-area">
          <div className="spinner" />{/* your CSS spinner */}
          <p className="joke">{joke}</p>
        </div>
      ) : !showResults ? (
        <div id="search-container">
          <div className="logo">
            <span className="red">G</span>
            <span className="yellow">I</span>
            <span className="blue">I</span>
            <span className="green">G</span>
            <span className="red">L</span>
            <span className="blue">E</span>
          </div>
          <div className="search-box">
            <input
              value={q}
              onChange={e => setQ(e.target.value)}
              onKeyDown={e => e.key === 'Enter' && q.trim() && doSearch()}
              className="search-input"
              placeholder="Search Giigle or type a URL"
            />
            <button
              onClick={() => q.trim() && doSearch()}
              className="search-button"
            >
              Search
            </button>
          </div>
        </div>
      ) : (
        <>
          <div className="watermark">{wm}</div>
          <div className="results">
            {results.map((r, i) => (
              <div className="result" key={i}>
                <Link to={`/page?url=${encodeURIComponent(r.url)}`}>
                  {r.title}
                </Link>
                <div className="url">{r.url}</div>
                <p className="snippet">{r.snippet}</p>
              </div>
            ))}
          </div>
        </>
      )}
    </div>
  );
}