import React, { useEffect, useState, useRef } from 'react';
import { Link } from 'react-router-dom';
import './Page.css';

const WATERMARK = "ðŸš¨ FAKE CONTENT ! DO NOT TRUST ðŸš¨";
const AI_JOKES = [
  "We promise this course project is not generated by AI --- Wait, How can you tell?",
  // "Why did the AI cross the road? Because it thought the other side was just a simulation!",
  // "My AI writes punsâ€”theyâ€™re so bad, they cause a recursive eye-roll error.",
  // "I asked my AI to make me breakfastâ€”it returned a JSON recipe!",
  // "Why are AIs great musicians? They always hit the right notes with binary beats.",
  // "I told my AI to tell me a story. It responded with 'Once upon a compile...'"
];

export default function Page() {
  const [content, setContent] = useState('');
  const [loading, setLoading] = useState(true);
  const [joke, setJoke] = useState('');
  const jokeInterval = useRef(null);

  // Cleanup on unmount
  useEffect(() => {
    return () => clearInterval(jokeInterval.current);
  }, []);

  // Start rotating jokes
  const startJokes = () => {
    setJoke(AI_JOKES[Math.floor(Math.random() * AI_JOKES.length)]);
    jokeInterval.current = setInterval(() => {
      setJoke(AI_JOKES[Math.floor(Math.random() * AI_JOKES.length)]);
    }, 4000);
  };

  // Stop jokes
  const stopJokes = () => {
    clearInterval(jokeInterval.current);
    jokeInterval.current = null;
    setJoke('');
  };

  useEffect(() => {
    const params = new URLSearchParams(window.location.search);
    const url = params.get('url');
    if (!url) return;

    setLoading(true);
    startJokes();

    fetch(`/api/page?url=${encodeURIComponent(url)}`)
      .then(res => res.json())
      .then(({ content }) => {
        const clean = content.replace(/```html/g, '').replace(/```/g, '');
        setContent(clean);
      })
      .catch(err => {
        console.error(err);
        setContent('<h1>Error loading page</h1><p>Sorry!</p>');
      })
      .finally(() => {
        stopJokes();
        setLoading(false);
      });
  }, []);

  return (
    <div className="page-container">
      <div className="header">
        <Link to="/" className="back-to-search">
          <span className="logo">
            <span className="red">G</span>
            <span className="yellow">I</span>
            <span className="blue">I</span>
            <span className="green">G</span>
            <span className="red">L</span>
            <span className="blue">E</span>
          </span>
        </Link>
      </div>

      <div className="watermark">{WATERMARK}</div>

      {loading ? (
        <div className="loading-area">
          <div className="spinner" />
          <p className="joke">{joke}</p>
        </div>
      ) : (
        <div className="content-container">
          <div dangerouslySetInnerHTML={{ __html: content }} />
        </div>
      )}
    </div>
  );
}